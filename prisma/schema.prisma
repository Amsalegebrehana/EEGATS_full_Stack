generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
}

model Pool {
  id                String         @id @default(uuid())
  name              String         @unique
  numberOfQuestions Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Category          Category[]
  Contributors      Contributors[]
  Exam              Exam[]
  Questions         Questions[]
}

model ExamGroup {
  id         String       @id @default(uuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Exam       Exam[]
  TestTakers TestTakers[]
}

model Contributors {
  id                     String                  @id @default(uuid())
  name                   String
  email                  String                  @unique
  password               String
  poolId                 String
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  reviewsMade            Int                     @default(0)
  contributorAssignments ContributorAssignment[]
  pool                   Pool                    @relation(fields: [poolId], references: [id])
  Questions              Questions[]
  Reviews                Review[]
}

model Exam {
  id                String              @id @default(uuid())
  name              String
  numberOfQuestions Int                 @default(0)
  duration          Float               @default(0)
  testingDate       DateTime
  status            ExamStatus
  poolId            String
  examGroupId       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  examGroup         ExamGroup           @relation(fields: [examGroupId], references: [id])
  pool              Pool                @relation(fields: [poolId], references: [id])
  Questions         Questions[]
  TestSession       TestSession[]
  TestTakerResponse TestTakerResponse[]
}

model TestTakers {
  id                String              @id @default(uuid())
  name              String
  username          String              @unique
  password          String
  examGroupId       String
  createdAt         DateTime            @default(now())
  TestSession       TestSession[]
  TestTakerResponse TestTakerResponse[]
  examGroup         ExamGroup           @relation(fields: [examGroupId], references: [id])
}

model Choice {
  id                String             @id @default(uuid())
  title             String
  image             String?
  questionId        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  questions         Questions          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  QuestionAnswer    QuestionAnswer[]
  TestTakerResponse TestTakerResponse?
}

model QuestionAnswer {
  id         String    @id @default(uuid())
  questionId String
  choiceId   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  choice     Choice    @relation(fields: [choiceId], references: [id])
  questions  Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Questions {
  id                String              @id @default(uuid())
  title             String
  image             String?
  status            QuestionStatus      @default(waiting)
  poolId            String
  catId             String
  examId            String?
  contributorId     String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  choices           Choice[]
  QuestionAnswer    QuestionAnswer[]
  category          Category            @relation(fields: [catId], references: [id])
  Contributors      Contributors        @relation(fields: [contributorId], references: [id])
  exam              Exam?               @relation(fields: [examId], references: [id])
  pool              Pool                @relation(fields: [poolId], references: [id])
  review            Review[]
  TestTakerResponse TestTakerResponse[]
}

model TestTakerResponse {
  id          String     @id @default(uuid())
  testTakerId String
  isCorrect   Boolean
  questionId  String
  examId      String
  choiceId    String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  choice      Choice     @relation(fields: [choiceId], references: [id])
  exam        Exam       @relation(fields: [examId], references: [id])
  questions   Questions  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  testTakers  TestTakers @relation(fields: [testTakerId], references: [id])
}

model TestSession {
  id          String     @id @default(uuid())
  grade       Int
  isSubmitted Boolean    @default(false)
  testTakerId String
  examId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  exam        Exam       @relation(fields: [examId], references: [id])
  testTakers  TestTakers @relation(fields: [testTakerId], references: [id])
}

model Review {
  id         String       @id @default(uuid())
  questionId String
  reviewerId String
  feedback   String?
  isReviewed Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  questions  Questions    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Reviewers  Contributors @relation(fields: [reviewerId], references: [id])
}

model Category {
  id                     String                  @id @default(uuid())
  name                   String
  poolId                 String
  numOfQuestions         Int
  pool                   Pool                    @relation(fields: [poolId], references: [id])
  contributorAssignments ContributorAssignment[]
  questions              Questions[]
}

model ContributorAssignment {
  id                 String       @id @default(uuid())
  catId              String
  contrId            String
  questionsRemaining Int
  category           Category     @relation(fields: [catId], references: [id])
  contributor        Contributors @relation(fields: [contrId], references: [id])
}

enum QuestionStatus {
  waiting
  approved
  rejected
  selected
}

enum ExamStatus {
  generated
  published
  gradeReleased
}
