generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
}

model Pool {
  id                String         @id @default(uuid())
  name              String         @unique
  numberOfQuestions Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Category          Category[]
  Contributors      Contributors[]
  Exam              Exam[]
  Questions         Questions[]
}

model ExamGroup {
  id         String       @id @default(uuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Exam       Exam[]
  TestTakers TestTakers[]
}

model Contributors {
  id                     String                  @id @default(uuid())
  name                   String
  email                  String                  @unique
  password               String
  poolId                 String
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  reviewsMade            Int                     @default(0)
  contributorAssignments ContributorAssignment[]
  pool                   Pool                    @relation(fields: [poolId], references: [id])
  Questions              Questions[]
  Reviews                Review[]
}

model Exam {
  id                String              @id @default(uuid())
  name              String
  numberOfQuestions Int                 @default(0)
  duration          Float               @default(0)
  testingDate       DateTime
  status            ExamStatus
  poolId            String
  examGroupId       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  examGroup         ExamGroup           @relation(fields: [examGroupId], references: [id])
  pool              Pool                @relation(fields: [poolId], references: [id])
  Questions         Questions[]
  TestSession       TestSession[]
  TestTakerResponse TestTakerResponse[]
}

model TestTakers{
  id        String            @id @default(uuid())
  name      String
  username  String  @unique
  password  String
  examGroupId  String
  examGroup  ExamGroup @relation(fields: [examGroupId], references: [id])
  TestTakerResponse TestTakerResponse [] 
  TestSession TestSession []
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt 
  
 
}

model Choice{
  id        String            @id @default(uuid())
  title     String
  image     String?
  questionId String
  questions         Questions          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  QuestionAnswer QuestionAnswer []
  TestTakerResponse TestTakerResponse[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model QuestionAnswer{
  id        String            @id @default(uuid())
  questionId String @unique
  questions  Questions @relation(fields: [questionId], references: [id])
  choiceId String
  choice Choice @relation(fields: [choiceId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Questions{
  id        String            @id @default(uuid())
  title     String
  image     String?
  status    QuestionStatus @default(waiting)
  poolId    String
  catId     String
  category  Category @relation(fields: [catId], references: [id])
  pool      Pool @relation(fields: [poolId], references: [id])
  examId    String?
  exam      Exam? @relation(fields: [examId], references: [id])
  contributorId String
  Contributors Contributors @relation(fields: [contributorId], references: [id])
  choices Choice []
  review Review?
  QuestionAnswer QuestionAnswer []
  TestTakerResponse TestTakerResponse[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model TestTakerResponse {
  id          String     @id @default(uuid())
  testTakerId String
  testTakers TestTakers? @relation(fields: [testTakerId], references: [id])
  isCorrect   Boolean 
  questionId String 
  questions  Questions @relation(fields: [questionId], references: [id])
  examId    String
  exam      Exam @relation(fields: [examId], references: [id])
  choiceId String 
  choice Choice @relation(fields: [choiceId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  @@unique([testTakerId, examId, questionId])
}

model TestSession {
  id        String            @id @default(uuid())
  grade     Int @default(0)
  isSubmitted Boolean  @default(false)
  testTakerId String
  testTakers TestTakers @relation(fields: [testTakerId], references: [id])
  examId String 
  exam     Exam @relation(fields: [examId], references: [id])
  currentQuestion Int @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@unique([testTakerId, examId])
}

model Review {
  id        String            @id @default(uuid())
  questionId String @unique
  reviewerId String
  feedback   String?
  isReviewed Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  questions  Questions    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Reviewers  Contributors @relation(fields: [reviewerId], references: [id])
}

model Category {
  id                     String                  @id @default(uuid())
  name                   String
  poolId                 String
  numOfQuestions         Int
  pool                   Pool                    @relation(fields: [poolId], references: [id])
  contributorAssignments ContributorAssignment[]
  questions              Questions[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

model ContributorAssignment {
  id                  String        @id @default(uuid())
  catId               String
  contrId              String
  category            Category @relation(fields:[catId], references: [id])
  contributor         Contributors @relation(fields: [contrId], references: [id])
  questionsRemaining  Int
  @@unique([contrId, catId])
}

enum QuestionStatus {
  waiting
  approved
  rejected
  selected
  draft
}

enum ExamStatus {
  generated
  published
  gradeReleased
}
